<?php
/**
 * @file
 * stanford_subsites_admin_dash.module
 *
 * @author (s)
 *         Shea McKinney / sherakama
 *
 * @todo :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 *
 *
 * :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 */

// Load Helper Module.
module_load_include('inc', 'stanford_subsites', 'stanford_subsites');


/**
 * Implements hook_help().
 */
function stanford_subsites_admin_dash_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sws_admin_dash':
      return '<p>' . t('For more help please contact stanford web services: %email',
       array('%email' => 'help@stanford.edu')) . '</p>';
  }
  return;
}


/**
 * Implements hook_permission().
 */
function stanford_subsites_admin_dash_permission() {
  return array(
    'access sws admin dash' => array(
      'title' => t('Access Stanford Subsite Admin Dashboard'),
      'description' => t('See and use administration dashboard blocks'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stanford_subsites_admin_dash_menu($items = array()) {
  $items['admin/config/subsites/dashboard'] = array(
    'title' => 'Subsite administration dashboard',
    'page callback' => 'stanford_subsites_admin_dash_dashboard',
    'description' => 'An administration page for managing subsites and subsite content.',
    'access arguments' => array('access sws admin dash'),
    'type' => MENU_NORMAL_ITEM,
    'file' => "stanford_subsites_admin_dash.pages.inc",
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function stanford_subsites_admin_dash_views_api() {
  return array("version" => "3.0");
}

/**
 * Implements hook_theme().
 */
function stanford_subsites_admin_dash_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['page_subsite_dashboard'] = array(
    'render element' => 'content',
    'base hook' => 'page',
    'template' => 'page--admin--config--subsites--dashboard',
    'path' => drupal_get_path('module', 'stanford_subsites_admin_dash') . '/templates',
   );
  return $theme;
}

////////////////////////////////////////////////////////////////////////////////
// BLOCKS       ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_block_info().
 */
function stanford_subsites_admin_dash_block_info() {

  $blocks['subsites_dashboard_banner'] = array(
    'info' => t('Subsite dashboard banner'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['subsites_dashboard_contexts'] = array(
    'info' => t('Subsite dashboard contexts'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['subsites_dashboard_blocks'] = array(
    'info' => t('Subsite dashboard blocks'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['subsites_dashboard_content'] = array(
    'info' => t('Subsite dashboard content'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['subsites_dashboard_create_new'] = array(
    'info' => t('Subsite dashboard create new'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['subsites_dashboard_edit_subs'] = array(
    'info' => t('Subsite dashboard edit subsite'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stanford_subsites_admin_dash_block_view($delta = '') {
  $block = array();
  $subsite = node_load(stanford_subsites_get_subsite_workingspace());

  switch ($delta) {
    case 'subsites_dashboard_banner':
      $block['subject'] = check_plain($subsite->title);
      $block['title'] = "<none>";
      $block['content'] = stanford_subsites_dashboard_banner_block($subsite);
      break;

    case 'subsites_dashboard_contexts':
      $block['subject'] = t("Contexts");
      $block['title'] = t("Contexts");
      $block['content'] = stanford_subsites_dashboard_contexts_block($subsite);
      break;

    case 'subsites_dashboard_blocks':
      $block['subject'] = t("Blocks");
      $block['title'] = t("Blocks");
      $block['content'] = stanford_subsites_dashboard_blocks_block($subsite);
      break;

    case 'subsites_dashboard_content':
      $block['subject'] = t("Content");
      $block['title'] = t("Content");
      $block['content'] = stanford_subsites_dashboard_content_block($subsite);
      break;

    case 'subsites_dashboard_create_new':
      $block['subject'] = t("New");
      $block['title'] = t("New");
      $block['content'] = stanford_subsites_dashboard_create_new_block($subsite);
      break;

    case 'subsites_dashboard_edit_subs':
      $block['subject'] = t("Edit");
      $block['title'] = t("Edit");
      $block['content'] = stanford_subsites_dashboard_edit_subs_block($subsite);
      break;

  }
  return $block;
}


/**
 * [stanford_subsites_dashboard_banner_block description]
 * @return [type] [description]
 */
function stanford_subsites_dashboard_banner_block($subsite) {

  $title = isset($subsite->title) ? check_plain($subsite->title) : t("All subsites");

  $content = "<h2 class=\"sooper-dooper-big-heading\">" . $title . "</h2>";
  $content .= "<p>" . t("You are currently managing %subsite_name. Change to", array("%subsite_name" => $title)) . ": </p>";

  $content .= drupal_render(drupal_get_form('stanford_subsite_working_space_jump_select_form'));

  return $content;
}

/**
 * [stanford_subsites_dashboard_contexts_block description]
 * @param  [type] $subsite [description]
 * @return [type]          [description]
 */
function stanford_subsites_dashboard_contexts_block($subsite) {
  $content = "";
  $contexts = stanford_subsites_admin_dash_get_subsite_contexts($subsite);
  $index = stanford_subsite_index_get('nid', $subsite->nid);
  $alias = drupal_get_path_alias("node/" . $subsite->nid);
  $header = array(t("Name"), t("Description"), t("Paths"), t("Actions"));
  $rows = array();

  foreach ($contexts as $context_name => $context) {
    $paths = array();

    // If we have matching name and context then path up!
    if ($context->name == $index->context) {
      $paths[] = l($alias, $alias);
    }

    // Loop through the path conditions to gather paths.
    if (isset($context->conditions['path']['values'])) {
      foreach ($context->conditions['path']['values'] as $path) {
        if (stripos($path, $alias . "/") !== FALSE) {
          $paths[] = l($path, $path);
        }
      }
    }

    $list = array("items" => $paths, "type" => "ul");
    $path_list = theme('item_list', $list);
    $edit = l(t("Edit"), "admin/structure/context/list/" . $context->name . "/edit");
    $rows[]["data"] = array($context->name, $context->description, $path_list, $edit);
  }

  $table = array("header" => $header, "rows" => $rows);
  $content .= theme("table", $table);

  return $content;
}

/**
 * [stanford_subsites_dashboard_blocks_block description]
 * @param  [type] $subsite [description]
 * @return [type]          [description]
 */
function stanford_subsites_dashboard_blocks_block($subsite) {
  $content = "";
  $contexts = stanford_subsites_admin_dash_get_subsite_contexts($subsite);
  $index = stanford_subsite_index_get('nid', $subsite->nid);
  $alias = drupal_get_path_alias("node/" . $subsite->nid);
  $header = array(
    'title' => array('data' => t("Title"), 'type' => 'property', 'specifier' => 'name', 'sort' => 'desc'),
    'type' => array('data' => t("Type"), 'sort' => 'asc'),
    'context' => array('data' => t("Context")),
    'updated' => array('data' => t("Last Updated"), 'sort' => 'asc'),
    'author' => array('data' => t("Author"), 'sort' => 'asc'),
    'actions' => array('data' => t("Actions")),
  );
  $rows = array();

  global $theme;
  module_load_include("inc", "block", "block.admin");
  $blocks = block_admin_display_prepare_blocks($theme);

  foreach ($contexts as $context_name => $context) {

    // Only continue if we have blocks.
    if (!isset($context->reactions['block']['blocks'])) {
      continue;
    }

    foreach ($context->reactions['block']['blocks'] as $delta => $info) {
      $bean = NULL;
      $block = block_load($info['module'], $info['delta']);
      if ($info['module'] == "bean" && function_exists("bean_load_delta")) {
        $bean = bean_load_delta($info['delta']);
      }

      // Ok, titles are funky. Need to run through all this to get em.
      $title = isset($bean->label) ? $bean->label : FALSE;
      if ($title == FALSE) {
        $i = 0;
        while ($blocks[$i]) {
          if ($blocks[$i]['delta'] == $block->delta && $blocks[$i]['module'] == $block->module) {
            $title = check_plain($blocks[$i]['info']);
            break;
          }
          else {
            $title = t("Missing label");
          }
          $i++;
        }
      }

      $edit = isset($bean->type) ? l(t("Edit"), 'block/' . $bean->delta . '/edit') : l(t("Configure"), "admin/structure/block/manage/" . $info['module'] . "/" . $info['delta'] . "/configure");
      $configure = isset($bean->type) ? l(t("Configure"), "admin/structure/block/manage/" . $info['module'] . "/" . $info['delta'] . "/configure") : "";


      $rows[$delta]['title'] = $title;
      $rows[$delta]['type'] = isset($bean->type) ? $bean->type : "block";
      $rows[$delta]['context'][] = l(t($context->name), "admin/structure/context/list/" . $context->name . "/edit");
      $rows[$delta]['updated'] = isset($bean->changed) ? format_date($bean->changed, "small") : t("Not available");
      $rows[$delta]['author'] = isset($bean->changed) ? user_load($bean->uid)->name : t("Not available");
      $rows[$delta]['actions'] = $edit;

      if (!empty($configure)) {
        $rows[$delta]["actions"] .=  " | " . $configure;
      }

    }

  }

  // Formatting again...
  foreach ($rows as $delta => &$info) {
    $info['context'] = theme("item_list", array("items" => $info["context"]));
  }

  $table = array("header" => $header, "rows" => $rows, 'empty' => t('Sorry, no results found'),);
  $content .= theme("table", $table);

  return $content;
}

/**
 * Stanford manage content block.
 * @param  [type] $subsite [description]
 * @return [type]          [description]
 */
function stanford_subsites_dashboard_content_block($subsite) {
  $view = views_get_view('subsite_dashboard_manage_content');
  $content = "";

  // The $exposed_filters keys must correctly correspond with the actual keys of your view's exposed filters.
  $exposed_filters = array(
    'type' => 'All',
  );

  // Pass in exposed filter values. array_merge() order prioritizes user input.
  $view->exposed_input = array_merge($exposed_filters, (array) $view->exposed_input);
  $view->exposed_raw_input = array_merge($exposed_filters, (array) $view->exposed_raw_input);
  $view->exposed_data = array_merge($exposed_filters, (array) $view->exposed_data);

  // Only if we have a subsite.
  if (isset($subsite->nid)) {
    $tid = $subsite->{SUBSITE_TAGS_FIELD}[$subsite->language][0]['tid'];
    $view->set_arguments(array($tid));
    $view->set_display("block");
  }

  $content .= $view->preview();
  $view->destroy();

  return $content;
}

/**
 * Create new options block
 * @param  [type] $subsite [description]
 * @return [type]          [description]
 */
function stanford_subsites_dashboard_create_new_block($subsite) {
  $content = "";
  $vars = array();
  $items = array();
  $types = node_type_get_types();

  if ($subsite) {
    $term = _get_subsite_term_from_node($subsite);
  }

  // List out the available types of content that can/should go into a subsite.
  $enabled_types = variable_get('stanford_subsite_content_types', array());
  foreach ($enabled_types as $type) {
    if (isset($term)) {
      $items[] = l(t($types[$type]->name), "node/add/" . drupal_clean_css_identifier($type), array("query" => array(SUBSITE_TAGS_FIELD => $term->tid)));
    }
    else {
      $items[] = l(t($types[$type]->name), "node/add/" . drupal_clean_css_identifier($type));
    }
  }

  $vars['items'] = $items;
  $content = theme("item_list", $vars);

  return $content;
}


/**
 * Subsite options
 * @param  [type] $subsite [description]
 * @return [type]          [description]
 */
function stanford_subsites_dashboard_edit_subs_block($subsite) {

  if (!isset($subsite)) {
    return "";
  }

  $content = "";
  $menu_name = _get_subsite_menu_name($subsite);
  $menu_url = "admin/structure/menu/manage/" . $menu_name;
  $edit_url = "node/edit/" . $subsite->nid;
  $vars = array();
  $items = array();

  $items[] = l(t("Menu"), $menu_url);
  $items[] = l(t("Settings"), $edit_url);

  $vars['items'] = $items;
  $content = theme("item_list", $vars);
  return $content;
}

/**
 * Returns a list of contexts filtered by the subsite of choice.
 * @param  [type] $subsite [description]
 * @return [type]          [description]
 */
function stanford_subsites_admin_dash_get_subsite_contexts($subsite) {
  $contexts = context_load();
  $nid = $subsite->nid;
  $alias = drupal_get_path_alias("node/" . $subsite->nid);
  // $index = stanford_subsite_index_get("nid", $subsite->nid);
  // $tid = $index->tid;

  foreach ($contexts as $context_name => $context) {
    $valid = FALSE;

    if (isset($context->conditions['active_subsite'])) {
      if (in_array($nid, $context->conditions['active_subsite']['values'])) {
        $valid = TRUE;
      }
    }

    if (isset($context->conditions['path'])) {
      foreach ($context->conditions['path']['values'] as $path) {
        if (strpos($path, $alias . "/") !== FALSE) {
          $valid = TRUE;
        }
      }
    }

    if (!$valid) {
      unset($contexts[$context_name]);
    }

  }

  return $contexts;
}


/**
 * Returns a select box with an option to select all the jumpstart blocks
 * @return [type] [description]
 */
function stanford_subsite_working_space_jump_select_form($form, $form_state, $subsite = NULL) {
  $form = array();
  $subsite = (!is_null($subsite)) ? $subsite : node_load(stanford_subsites_get_subsite_workingspace());

  $active_subsites = stanford_subsites_get_subsite_nodes();
  $options = array(0 => "-- " . t("All subsites") . " --");

  foreach ($active_subsites as $node) {
    $options[$node->nid] = $node->title;
  }

  $form['subsite_workingspace'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($subsite->nid) ? $subsite->nid : 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('change'),
  );

  return $form;
}

/**
 * [stanford_subsite_working_space_jump_select_form_submit description]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function stanford_subsite_working_space_jump_select_form_submit($form, $form_state) {
  $new_nid = check_plain($form_state['values']['subsite_workingspace']);
  stanford_subsites_set_subsite_workingspace($new_nid);
  drupal_set_message(t("Subsite working space has been changed"), "status");
}


