<?php
/**
 * @file stanford_sws.module
 *
 * @author (s)
 *         Shea McKinney / sherakama
 *
 * @description
 * This module provides helper functionality to the sws site within a site
 * feature.
 *
 *
 * @todo :::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 *
 *  1. Implement $logo theme hook change
 *
 * :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 *
 */


// The content type that defines a subsite
DEFINE('SUBSITE_CONTENT_TYPE', "sub_site");
// The reference field that connects a child node to a subsite
DEFINE('SUBSITE_REF_FIELD', 'field_sws_sub_site');
// The field that changes the site title
DEFINE("SUBSITE_NAME_FIELD", "field_sws_site_name");
// The field that changes the site logo
DEFINE("SUBSITE_LOGO_FIELD", "field_sws_site_logo");
// The field that changes $front_page
DEFINE("SUBSITE_FRONT_PAGE_FIELD", "field_sws_front_page");


/**
 * Implements hook_help().
 */
function stanford_sws_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    /*
     *case 'admin/help#block':
     *  return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';
     */
    case 'admin/help#sws':
      return '<p>' . t('For more help please contact stanford web services: %email', array('%email' => 'admin@stanford.edu')) . '</p>';
  }
  return;
}

/**
 * Implements hook_perm().
 */
function stanford_sws_perm() {
  return array(
    'administer site within a site',
    );
}

/**
 * Implements hook_preprocess().
 */
function stanford_sws_preprocess_page(&$variables, $hook) {

  /*
    Check to see if this page is a node. If so apply subtheme by node reference
   */
  if(isset($variables['node'])) {
    $node = $variables['node'];

    if($subsite_node = _lookup_subsite_reference_by_node($node)) {
        stanford_sws_apply_subsite($subsite_node, $variables);
    }

    return;
  } // end if node//

  /*
    If the page being viewed is not a node then check the path
  */

  $request_path = request_path();
  $parent_site = _lookup_subsite_reference_by_path($request_path);

}

/**
 * _lookup_subsite_reference_by_node()
 * @param $node - The currently being viewed node object
 * @return  boolen - True if this node has a subsite / False if none
 */

function _lookup_subsite_reference_by_node($node) {

  // If the node that is being viewed is the subsite node then just return it!
  if($node->type == SUBSITE_CONTENT_TYPE) { return $node; }

  // Node is of another type... Get parent
  if(!isset($node->{SUBSITE_REF_FIELD}[$node->language][0]['entity']) ||
  !is_object($node->{SUBSITE_REF_FIELD}[$node->language][0]['entity']))
  {
    return false;
  } // no reference

  // This should always be a subsite content type based on field settings
  $subsite_node = $node->{SUBSITE_REF_FIELD}[$node->language][0]['entity'];

  // But just in case someone mucked with them
  if($subsite_node->type !== SUBSITE_CONTENT_TYPE) {
    return false;
  }

  return $subsite_node;
}

/**
 * _lookup_subsite_reference_by_path
 * @param  $path - String - The currently viewed url path
 * @return Mixed - A node object of the subsite node or false if none
 */

function _lookup_subsite_reference_by_path($path) {

  return false;
}

/**
 * stanford_sws_apply_subsite
 * @param $node - the subsite node object
 * @param $variables - The variables array from hook_preprocess_page
 * Function tasks:
 *   1. Change $title [if set]
 *   2. Change $logo [if set]
 *   3. Change the $front_page url [if set]
 */

function stanford_sws_apply_subsite($node, &$vars) {

  // Change the site Title
  if(isset($node->{SUBSITE_NAME_FIELD}[$node->language][0]["safe_value"])
    && !empty($node->{SUBSITE_NAME_FIELD}[$node->language][0]["safe_value"]))
  {
    $vars['site_name'] = $node->{SUBSITE_NAME_FIELD}[$node->language][0]["safe_value"];
  }

  // Change the site logo
  if(isset($node->{SUBSITE_LOGO_FIELD}[$node->language][0]["uri"])
    && !empty($node->{SUBSITE_LOGO_FIELD}[$node->language][0]["uri"]))
  {
    $vars['logo'] = file_create_url($node->{SUBSITE_LOGO_FIELD}[$node->language][0]["uri"]);
  }

  // Change $front_page url
  if(isset($node->{SUBSITE_FRONT_PAGE_FIELD}[$node->language][0]["value"])
    && $node->{SUBSITE_FRONT_PAGE_FIELD}[$node->language][0]["value"])
  {
    $vars['front_page'] = url('node/' . $node->nid, array('absolute' => TRUE));
  }




}
